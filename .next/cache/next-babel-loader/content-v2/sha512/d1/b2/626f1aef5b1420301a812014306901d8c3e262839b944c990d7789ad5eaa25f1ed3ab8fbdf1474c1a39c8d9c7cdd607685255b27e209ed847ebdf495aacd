{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport getCommerce from '../utils/commerce';\nimport Layout from '../components/Layout';\nimport { Box, Button, Card, CircularProgress, FormControl, Grid, InputLabel, List, ListItem, MenuItem, Select, Step, StepLabel, Stepper, TextField, Typography } from '@material-ui/core';\nimport { useStyles } from '../utils/styles';\nimport { Store } from '../components/Store';\nimport Router from 'next/router';\nimport { ORDER_SET } from '../utils/constants';\nimport dynamic from 'next/dynamic';\nimport { Alert } from '@material-ui/lab';\nconst dev = false || true; // remove \"|| true\" in production\n\nfunction Checkout(props) {\n  const classes = useStyles();\n  const {\n    state,\n    dispatch\n  } = useContext(Store);\n  const {\n    cart\n  } = state;\n  const {\n    0: errors,\n    1: setErrors\n  } = useState([]);\n  const {\n    0: checkoutToken,\n    1: setCheckoutToken\n  } = useState({}); // Customer details\n\n  const {\n    0: firstName,\n    1: setFirstName\n  } = useState(dev ? 'Jane' : '');\n  const {\n    0: lastName,\n    1: setLastName\n  } = useState(dev ? 'Doe' : '');\n  const {\n    0: email,\n    1: setEmail\n  } = useState(dev ? 'janedoe@email.com' : ''); // Shipping details\n\n  const {\n    0: shippingName,\n    1: setShippingName\n  } = useState(dev ? 'Jane Doe' : '');\n  const {\n    0: shippingStreet,\n    1: setShippingStreet\n  } = useState(dev ? '123 Fake St' : '');\n  const {\n    0: shippingCity,\n    1: setShippingCity\n  } = useState(dev ? 'Los Angeles' : '');\n  const {\n    0: shippingStateProvince,\n    1: setShippingStateProvince\n  } = useState(dev ? 'AR' : '');\n  const {\n    0: shippingPostalZipCode,\n    1: setShippingPostalZipCode\n  } = useState(dev ? '90089' : '');\n  const {\n    0: shippingCountry,\n    1: setShippingCountry\n  } = useState(dev ? 'GB' : ''); // Payment details\n\n  const {\n    0: cardNum,\n    1: setCardNum\n  } = useState(dev ? '4242 4242 4242 4242' : '');\n  const {\n    0: expMonth,\n    1: setExpMonth\n  } = useState(dev ? '11' : '');\n  const {\n    0: expYear,\n    1: setExpYear\n  } = useState(dev ? '2023' : '');\n  const {\n    0: cvv,\n    1: setCvv\n  } = useState(dev ? '123' : '');\n  const {\n    0: billingPostalZipcode,\n    1: setBillingPostalZipcode\n  } = useState(dev ? '90089' : ''); // Shipping and fulfillment data\n\n  const {\n    0: shippingCountries,\n    1: setShippingCountries\n  } = useState({});\n  const {\n    0: shippingSubdivisions,\n    1: setShippingSubdivisions\n  } = useState({});\n  const {\n    0: shippingOptions,\n    1: setShippingOptions\n  } = useState([]);\n  const {\n    0: shippingOption,\n    1: setShippingOption\n  } = useState({});\n  useEffect(() => {\n    if (!cart.loading) {\n      generateCheckoutToken();\n    }\n  }, [cart.loading]);\n\n  const generateCheckoutToken = async () => {\n    if (cart.data.line_items.length) {\n      const commerce = getCommerce(props.commercePublicKey);\n      const token = await commerce.checkout.generateToken(cart.data.id, {\n        type: 'cart'\n      });\n      setCheckoutToken(token);\n      fetchShippingCountries(token.id);\n    } else {\n      Router.push('/cart');\n    }\n  };\n\n  const fetchShippingCountries = async checkoutTokenId => {\n    const commerce = getCommerce(props.commercePublicKey);\n    const countries = await commerce.services.localeListShippingCountries(checkoutTokenId);\n    setShippingCountries(countries.countries);\n  };\n\n  const fetchSubdivisions = async countryCode => {\n    const commerce = getCommerce(props.commercePublicKey);\n    const subdivisions = await commerce.services.localeListSubdivisions(countryCode);\n    setShippingSubdivisions(subdivisions.subdivisions);\n  };\n\n  const fetchShippingOptions = async (checkoutTokenId, country, stateProvince = null) => {\n    const commerce = getCommerce(props.commercePublicKey);\n    const options = await commerce.checkout.getShippingOptions(checkoutTokenId, {\n      country: country,\n      region: stateProvince\n    });\n    const shippingOption = options[0] ? options[0].id : null;\n    setShippingOption(shippingOption);\n    setShippingOptions(options);\n    console.log(shippingOption);\n  };\n\n  const handleShippingCountryChange = e => {\n    const currentValue = e.target.value;\n    setShippingCountry(e.target.value);\n    fetchSubdivisions(currentValue);\n  };\n\n  const handleSubdivisionChange = e => {\n    const currentValue = e.target.value;\n    setShippingStateProvince(currentValue);\n    fetchShippingOptions(checkoutToken.id, shippingCountry, currentValue);\n  };\n\n  const handleShippingOptionChange = e => {\n    const currentValue = e.target.value;\n    setShippingOption(currentValue);\n    console.log(currentValue);\n  };\n\n  const handleCaptureCheckout = async () => {\n    const orderData = {\n      line_items: checkoutToken.live.line_items,\n      customer: {\n        firstname: firstName,\n        lastname: lastName,\n        email: email\n      },\n      shipping: {\n        name: shippingName,\n        street: shippingStreet,\n        town_city: shippingCity,\n        county_state: shippingStateProvince,\n        postal_zip_code: shippingPostalZipCode,\n        country: shippingCountry\n      },\n      fulfillment: {\n        shipping_method: shippingOption\n      },\n      payment: {\n        gateway: 'test_gateway',\n        card: {\n          number: cardNum,\n          expiry_month: expMonth,\n          expiry_year: expYear,\n          cvc: cvv,\n          postal_zip_code: billingPostalZipcode\n        }\n      }\n    };\n    const commerce = getCommerce(props.commercePublicKey);\n\n    try {\n      const order = await commerce.checkout.capture(checkoutToken.id, orderData);\n      dispatch({\n        type: ORDER_SET,\n        payload: order\n      });\n      localStorage.setItem('order_receipt', JSON.stringify(order));\n      await refreshCart();\n      Router.push('/confirmation');\n    } catch (err) {\n      const errList = [err.data.error.message];\n      const errs = err.data.error.errors;\n\n      for (const index in errs) {\n        errList.push(`${index}: ${errs[index]}`);\n      }\n\n      setErrors(errList);\n    }\n  };\n\n  const refreshCart = async () => {\n    const commerce = getCommerce(props.commercePublicKey);\n    commerce.cart.refresh().then(newCart => {\n      this.setState({\n        cart: newCart\n      });\n    }).catch(error => {\n      console.log('There was an error refreshing your cart', error);\n    });\n  };\n\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n\n    if (activeStep === steps.length - 1) {\n      handleCaptureCheckout();\n    }\n  };\n\n  const handleBack = () => {\n    setErrors([]);\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  function getSteps() {\n    return ['Customer information', 'Shipping details', 'Payment information'];\n  }\n\n  function getStepContent(step) {\n    switch (step) {\n      case 0:\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"firstName\",\n            label: \"First Name\",\n            name: \"firstName\",\n            value: firstName,\n            onChange: e => setFirstName(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"lastName\",\n            label: \"Last Name\",\n            name: \"lastName\",\n            value: lastName,\n            onChange: e => setLastName(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"email\",\n            label: \"Email\",\n            name: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          })]\n        });\n\n      case 1:\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"shippingName\",\n            label: \"Full Name\",\n            name: \"name\",\n            value: shippingName,\n            onChange: e => setShippingName(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"shippingStreet\",\n            label: \"Street\",\n            name: \"address\",\n            value: shippingStreet,\n            onChange: e => setShippingStreet(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"shippingCity\",\n            label: \"City\",\n            name: \"city\",\n            value: shippingCity,\n            onChange: e => setShippingCity(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"shippingPostalZipCode\",\n            label: \"Postal/Zip Code\",\n            name: \"postalCode\",\n            value: shippingPostalZipCode,\n            onChange: e => setShippingPostalZipCode(e.target.value)\n          }), /*#__PURE__*/_jsxs(FormControl, {\n            className: classes.formControl,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              id: \"shippingCountry-label\",\n              children: \"Country\"\n            }), /*#__PURE__*/_jsx(Select, {\n              labelId: \"shippingCountry-label\",\n              id: \"shippingCountry\",\n              label: \"Country\",\n              fullWidth: true,\n              onChange: handleShippingCountryChange,\n              value: shippingCountry,\n              children: Object.keys(shippingCountries).map(index => /*#__PURE__*/_jsx(MenuItem, {\n                value: index,\n                children: shippingCountries[index]\n              }, index))\n            })]\n          }), /*#__PURE__*/_jsxs(FormControl, {\n            className: classes.formControl,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              id: \"shippingStateProvince-label\",\n              children: \"State / Province\"\n            }), /*#__PURE__*/_jsx(Select, {\n              labelId: \"shippingStateProvince-label\",\n              id: \"shippingStateProvince\",\n              label: \"State/Province\",\n              fullWidth: true,\n              onChange: handleSubdivisionChange,\n              value: shippingStateProvince,\n              required: true,\n              className: classes.mt1,\n              children: Object.keys(shippingSubdivisions).map(index => /*#__PURE__*/_jsx(MenuItem, {\n                value: index,\n                children: shippingSubdivisions[index]\n              }, index))\n            })]\n          }), /*#__PURE__*/_jsxs(FormControl, {\n            className: classes.formControl,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              id: \"shippingOption-label\",\n              children: \"Shipping Option\"\n            }), /*#__PURE__*/_jsx(Select, {\n              labelId: \"shippingOption-label\",\n              id: \"shippingOption\",\n              label: \"Shipping Option\",\n              fullWidth: true,\n              onChange: handleShippingOptionChange,\n              value: shippingOption,\n              required: true,\n              className: classes.mt1,\n              children: shippingOptions.map((method, index) => /*#__PURE__*/_jsx(MenuItem, {\n                value: method.id,\n                children: `${method.description} - $${method.price.formatted_with_code}`\n              }, index))\n            })]\n          })]\n        });\n\n      case 2:\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"cardNum\",\n            label: \"Card Number\",\n            name: \"cardNum\",\n            value: cardNum,\n            onChange: e => setCardNum(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"expMonth\",\n            label: \"Expiry Month\",\n            name: \"expMonth\",\n            value: expMonth,\n            onChange: e => setExpMonth(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"expYear\",\n            label: \"Expiry Year\",\n            name: \"expYear\",\n            value: expYear,\n            onChange: e => setExpYear(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"cvv\",\n            label: \"CVV\",\n            name: \"cvv\",\n            value: cvv,\n            onChange: e => setCvv(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            variant: \"outlined\",\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"billingPostalZipcode\",\n            label: \"Postal/Zip Code\",\n            name: \"postalCode\",\n            value: billingPostalZipcode,\n            onChange: e => setBillingPostalZipcode(e.target.value)\n          })]\n        });\n\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  const renderCheckoutForm = () => {\n    return /*#__PURE__*/_jsxs(\"form\", {\n      children: [/*#__PURE__*/_jsx(Stepper, {\n        activeStep: activeStep,\n        alternativeLabel: true,\n        children: steps.map(label => /*#__PURE__*/_jsx(Step, {\n          children: /*#__PURE__*/_jsx(StepLabel, {\n            children: label\n          })\n        }, label))\n      }), /*#__PURE__*/_jsx(Box, {\n        children: activeStep === steps.length ? errors && errors.length > 0 ? /*#__PURE__*/_jsxs(Box, {\n          children: [/*#__PURE__*/_jsx(List, {\n            children: errors.map(error => /*#__PURE__*/_jsx(ListItem, {\n              children: /*#__PURE__*/_jsx(Alert, {\n                severity: \"error\",\n                children: error\n              })\n            }, error))\n          }), /*#__PURE__*/_jsx(Box, {\n            className: classes.mt1,\n            children: /*#__PURE__*/_jsx(Button, {\n              onClick: handleBack,\n              className: classes.button,\n              children: \"Back\"\n            })\n          })]\n        }) : /*#__PURE__*/_jsxs(Box, {\n          children: [/*#__PURE__*/_jsx(CircularProgress, {}), /*#__PURE__*/_jsx(Typography, {\n            className: classes.instructions,\n            children: \"Confirming Order...\"\n          })]\n        }) : /*#__PURE__*/_jsxs(Box, {\n          children: [getStepContent(activeStep), /*#__PURE__*/_jsxs(Box, {\n            className: classes.mt1,\n            children: [/*#__PURE__*/_jsx(Button, {\n              disabled: activeStep === 0,\n              onClick: handleBack,\n              className: classes.button,\n              children: \"Back\"\n            }), /*#__PURE__*/_jsx(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: handleNext,\n              className: classes.button,\n              children: activeStep === steps.length - 1 ? 'Confirm Order' : 'Next'\n            })]\n          })]\n        })\n      })]\n    });\n  };\n\n  const renderCheckoutSummary = () => {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: /*#__PURE__*/_jsxs(List, {\n        children: [/*#__PURE__*/_jsx(ListItem, {\n          children: /*#__PURE__*/_jsx(Typography, {\n            variant: \"h2\",\n            children: \"Order summary\"\n          })\n        }), cart.data.line_items.map(lineItem => /*#__PURE__*/_jsx(ListItem, {\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxs(Grid, {\n              xs: 6,\n              item: true,\n              children: [lineItem.quantity, \" x \", lineItem.name]\n            }), /*#__PURE__*/_jsx(Grid, {\n              xs: 6,\n              item: true,\n              children: /*#__PURE__*/_jsx(Typography, {\n                align: \"right\",\n                children: lineItem.line_total.formatted_with_symbol\n              })\n            })]\n          })\n        }, lineItem.id)), /*#__PURE__*/_jsx(ListItem, {\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsx(Grid, {\n              xs: 6,\n              item: true,\n              children: \"Subtotal\"\n            }), /*#__PURE__*/_jsx(Grid, {\n              xs: 6,\n              item: true,\n              children: /*#__PURE__*/_jsx(Typography, {\n                align: \"right\",\n                children: cart.data.subtotal.formatted_with_symbol\n              })\n            })]\n          })\n        })]\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(Layout, {\n    title: \"Checkout\",\n    commercePublicKey: props.commercePublicKey,\n    children: [/*#__PURE__*/_jsx(Typography, {\n      gutterBottom: true,\n      variant: \"h6\",\n      color: \"textPrimary\",\n      component: \"h1\",\n      children: \"Checkout\"\n    }), cart.loading ? /*#__PURE__*/_jsx(CircularProgress, {}) : /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        md: 8,\n        children: /*#__PURE__*/_jsx(Card, {\n          className: classes.p1,\n          children: renderCheckoutForm()\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        md: 4,\n        children: /*#__PURE__*/_jsx(Card, {\n          children: renderCheckoutSummary()\n        })\n      })]\n    })]\n  });\n}\n\nexport default dynamic(() => Promise.resolve(Checkout), {\n  ssr: false\n});","map":null,"metadata":{},"sourceType":"module"}